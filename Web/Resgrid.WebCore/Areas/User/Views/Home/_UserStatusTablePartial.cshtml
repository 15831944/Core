@using System.Collections.ObjectModel
@using Resgrid.Model
@using Resgrid.Web.Helpers
@model Resgrid.Web.Areas.User.Models.UserStatusTableModel

<div class="table-responsive">
	<table class='table table-striped'>
		<tbody>
			@foreach (var g in Model.DepartmentGroups.Where(x => x.Parent == null))
			{
				var groupClass = "";
				if (Model.UsersGroup != null && g.Name == Model.UsersGroup.Name)
				{
					groupClass = "userGroup";
				}

				var filteredUsers = from u in g.Members
														where !(Model.ExcludedUsers.Any(item2 => item2 == u.UserId))
														select u;

				var sortedUsers = from u in filteredUsers
													let name = Model.Names[u.UserId]
													orderby name ascending
													select new
													{
														Name = name,
														User = u
													};

				<tr class="info trheader @groupClass hidden-xs">
					<td colspan="3">
						<b>@g.Name</b> <span class="sign"></span>
					</td>
					<td colspan="3" style="text-align: right;">
						@if (ClaimsAuthorizationHelper.IsUserDepartmentOrGroupAdmin(g.DepartmentGroupId) && Model.States == null)
						{
							<a class="btn btn-xs btn-default" data-confirm="CONFIRM: Are you sure you want to reset all the users in the @g.Name group to the Standing By state?" href="@Url.Action("ResetGroupToStandingBy", "Home", new {area = "User", groupId = g.DepartmentGroupId})">Reset group to Standing By</a>
						}
					</td>
				</tr>

				<tr>
					<td><span class="user-info">Name</span></td>
					<td><span class="user-info">Staffing</span></td>
					<td><span class="user-info">Status</span></td>
					<td class="user-info">Eta</td>
					<td class="hidden-xs"></td>
					<td class="hidden-xs"></td>
					<td class="hidden-xs"></td>
				</tr>

				if (sortedUsers.Any())
				{
					foreach (var u in sortedUsers)
					{
						//var mu = Membership.GetUser(u.User.UserId);
						var al = Model.LastUserActionlogs.Where(x => x.UserId == u.User.UserId).FirstOrDefault();
						var us = Model.UserStates.Where(x => x.UserId == u.User.UserId).FirstOrDefault();
						<tr>
							@Html.Partial("_UserStatusTableRowPartial", Tuple.Create(u.User.User.UserId, g, al, us, Model.Names[u.User.UserId], Model.Roles[u.User.UserId], Model))
						</tr>

					}
				}

				foreach (var g1 in Model.DepartmentGroups.Where(x => x.ParentDepartmentGroupId == g.DepartmentGroupId))
				{
					var sortedUsers1 = from u in g1.Members
														 let name = Model.Names[u.UserId]
														 where !(Model.ExcludedUsers.Any(item2 => item2 == u.UserId))
														 orderby name ascending
														 select new
														 {
															 Name = name,
															 User = u
														 };

					<tr class="success">
						<td colspan="3" style="padding-left: 20px;">
							<b>@g1.Name</b>
						</td>
						<td class="hidden-xs" colspan="3" style="text-align: right;">
							@if (ClaimsAuthorizationHelper.IsUserDepartmentOrGroupAdmin(g1.DepartmentGroupId) && Model.States == null)
							{
								<a class="btn btn-xs btn-default" data-confirm="CONFIRM: Are you sure you want to reset all the users in the @g1.Name group to the Standing By state?" href="@Url.Action("ResetGroupToStandingBy", "Home", new { area = "User", groupId = g1.DepartmentGroupId })">Reset group to Standing By</a>
							}
						</td>
					</tr>
					<tr>
						<td><span class="user-info">Name</span></td>
						<td><span class="user-info">Staffing</span></td>
						<td><span class="user-info">Status</span></td>
						<td class="hidden-xs"></td>
						<td class="hidden-xs"></td>
						<td class="hidden-xs"></td>
					</tr>

					if (sortedUsers1.Count() > 0)
					{
						foreach (var u in sortedUsers1)
						{
							//var mu = Membership.GetUser(u.User.UserId);
							var al = Model.LastUserActionlogs.Where(x => x.UserId == u.User.UserId).FirstOrDefault();
							var us = Model.UserStates.Where(x => x.UserId == u.User.UserId).FirstOrDefault();
							<tr>
								@Html.Partial("_UserStatusTableRowPartial", Tuple.Create(u.User.User.UserId, g1, al, us, Model.Names[u.User.UserId], Model.Roles[u.User.UserId], Model))
							</tr>

						}
					}
				}
			}

			@{
			var sortedUngroupedUsers = from u in Model.UnGroupedUsers
																 let name = Model.Names[u]
																 where !(Model.ExcludedUsers.Any(item2 => item2 == u))
																 orderby name ascending
																 select new
																 {
																	 Name = name,
																	 UserId = u
																 };
			}

			@if (sortedUngroupedUsers != null && sortedUngroupedUsers.Count() > 0)
			{
				<tr class="info">
					<td colspan="5">
						<b>Users</b>
					</td>
				</tr>
				<tr>
					<td><span class="user-info">Name</span></td>
					<td><span class="user-info">Staffing</span></td>
					<td><span class="user-info">Status</span></td>
					<td class="hidden-xs"></td>
					<td class="hidden-xs"></td>
					<td class="hidden-xs"></td>
				</tr>

				foreach (var u in sortedUngroupedUsers)
				{
					// mu = Membership.GetUser(u.User.UserId);
					var al = Model.LastUserActionlogs.Where(x => x.UserId == u.UserId).FirstOrDefault();
					var us = Model.UserStates.Where(x => x.UserId == u.UserId).FirstOrDefault();
					var dg = new DepartmentGroup();

					<tr>
						@Html.Partial("_UserStatusTableRowPartial", Tuple.Create(u.UserId, dg, al, us, Model.Names[u.UserId], Model.Roles[u.UserId], Model))
					</tr>
				}
			}
		</tbody>
	</table>
</div>

<script>
	$('.trheader').click(function () {
		var $this = $(this);
		$(this).nextUntil('tr.trheader').slideToggle(100).promise().done(function () {
			$this.find('span').text(function (_, value) {
				return value == '-' ? '+' : '-';
			});
		});
	});
</script>
<script type='text/javascript'>
		//<![CDATA[
		$(window).load(function () {
			$('.submenu').hover(function () {
				$(this).children('ul').removeClass('submenu-hide').addClass('submenu-show');
			}, function () {
				$(this).children('ul').removeClass('.submenu-show').addClass('submenu-hide');
			}).find("a:first").append(" &raquo; ");
		});
		//]]>
</script>