using System;
using System.Collections.Generic;
using System.Linq;
using Resgrid.Model;
using Resgrid.Model.Events;
using Resgrid.Model.Repositories;
using Resgrid.Model.Services;
using Resgrid.Providers.Bus;
using Resgrid.Model.Providers;

namespace Resgrid.Services
{
	public class UserStateService : IUserStateService
	{
		private static string CacheKey = "DepartmentUserStates_{0}";
		private static TimeSpan CacheLength = TimeSpan.FromDays(14);

		private readonly IUserStatesRepository _userStateRepository;
		private readonly IDepartmentsService _departmentsService;
		private readonly IEventAggregator _eventAggregator;
		private readonly ICacheProvider _cacheProvider;

		public UserStateService(IUserStatesRepository userStateRepository, IDepartmentsService departmentsService,
			IEventAggregator eventAggregator, ICacheProvider cacheProvider)
		{
			_userStateRepository = userStateRepository;
			_departmentsService = departmentsService;
			_eventAggregator = eventAggregator;
			_cacheProvider = cacheProvider;
		}

		public UserState GetUserStateById(int userStateId)
		{
			//return _userStateRepository.GetAll().FirstOrDefault(x => x.UserStateId == userStateId);
			return _userStateRepository.GetUserStateById(userStateId);
		}

		public UserState GetLastUserStateByUserId(string userId)
		{
			var userState = (from us in _userStateRepository.GetAll()
				where us.UserId == userId
				orderby us.UserStateId descending
				select us).FirstOrDefault();

			if (userState != null)
				return userState;

			var state = new UserState();
			state.UserId = userId;
			state.Timestamp = DateTime.UtcNow;
			state.State = (int)UserStateTypes.Available;
			state.AutoGenerated = true;

			return state;
		}

		public UserState GetPerviousUserState(string userId, int userStateId)
		{
			var userState = (from us in _userStateRepository.GetAll()
							 where us.UserId == userId && us.UserStateId < userStateId
							 orderby us.UserStateId descending
							 select us).FirstOrDefault();

			if (userState != null)
				return userState;

			var state = new UserState();
			state.UserId = userId;
			state.Timestamp = DateTime.UtcNow;
			state.State = (int)UserStateTypes.Available;

			return state;
		}

		public UserState CreateUserState(string userId, int departmentId, int userStateType)
		{
			var us = new UserState();
			us.UserId = userId;
			us.DepartmentId = departmentId;
			us.State = userStateType;
			us.Timestamp = DateTime.Now.ToUniversalTime();

			_userStateRepository.SaveOrUpdate(us);
			_eventAggregator.SendMessage<UserStaffingEvent>(new UserStaffingEvent() { DepartmentId = departmentId, Staffing = us });
			InvalidateLatestStatesForDepartmentCache(departmentId);

			return us;
		}

		public UserState CreateUserState(string userId, int departmentId, int userStateType, string note)
		{
			var us = new UserState();
			us.UserId = userId;
			us.DepartmentId = departmentId;
			us.State = userStateType;
			us.Timestamp = DateTime.UtcNow;
			us.Note = note;

			_userStateRepository.SaveOrUpdate(us);
			_eventAggregator.SendMessage<UserStaffingEvent>(new UserStaffingEvent() { DepartmentId = departmentId, Staffing = us });
			InvalidateLatestStatesForDepartmentCache(departmentId);

			return us;
		}

		public UserState CreateUserState(string userId, int departmentId, int userStateType, string note, DateTime timeStamp)
		{
			var us = new UserState();
			us.UserId = userId;
			us.DepartmentId = departmentId;
			us.State = userStateType;
			us.Timestamp = timeStamp;
			us.Note = note;

			_userStateRepository.SaveOrUpdate(us);
			_eventAggregator.SendMessage<UserStaffingEvent>(new UserStaffingEvent() { DepartmentId = departmentId, Staffing = us });
			InvalidateLatestStatesForDepartmentCache(departmentId);

			return us;
		}

		public List<UserState> GetStatesForDepartment(int departmentId)
		{
			var states = new List<UserState>();
			var users = _departmentsService.GetAllUsersForDepartment(departmentId);

			foreach (var u in users)
			{
				states.Add(GetLastUserStateByUserId(u.UserId));
			}

			return states;
		}

		public List<UserState> GetSAlltatesForDepartmentInDateRange(int departmentId, DateTime startDate, DateTime endDate)
		{
			//var allUsers = _departmentsService.GetAllUsersForDepartment(departmentId);
			//var userIds = allUsers.Select(x => x.UserId);

			var states = from s in _userStateRepository.GetAll()
									// let users = userIds
									 where s.Timestamp >= startDate && s.Timestamp <= endDate && s.DepartmentId == departmentId
									 select s;

			return states.ToList();
		}

		public void DeleteStatesForUser(string userId)
		{
			var states = from s in _userStateRepository.GetAll().AsEnumerable()
			             where s.UserId == userId
			             select s;

			_userStateRepository.DeleteAll(states);
		}

		public void InvalidateLatestStatesForDepartmentCache(int departmentId)
		{
			_cacheProvider.Remove(string.Format(CacheKey, departmentId));
		}

		public List<UserState> GetLatestStatesForDepartment(int departmentId, bool bypassCache = false)
		{
			Func<List<UserState>> getUserStates = delegate()
			{
				var states = _userStateRepository.GetLatestUserStatesForDepartment(departmentId);

				return states.GroupBy(l => l.UserId)
				.Select(g => g.OrderByDescending(l => l.UserStateId).First())
				.ToList();
			};

			if (!bypassCache)
				return _cacheProvider.Retrieve(string.Format(CacheKey, departmentId), getUserStates, CacheLength);

			return getUserStates();
		}
	}
}
